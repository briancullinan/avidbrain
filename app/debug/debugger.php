<?php
	if(DEBUG==true){
		error_reporting(0);
		ini_set('display_errors', 0);
		if(!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
			// AJAX ERRORS
		}
		else{
			$whoops = new \Whoops\Run;
			$whoops->pushHandler(new \Whoops\Handler\PrettyPageHandler);
			$whoops->register();
		}

		$configuration = [
			'debug'=>true,
		    'settings' => [
		        'displayErrorDetails' => true,
		    ],
		];
	}
	else{
		error_reporting(0);
		ini_set('display_errors', 0);
		$configuration = [
			'debug'=>false,
		    'settings' => [
		        'displayErrorDetails' => false,
		    ],
		];
	}

	function geterrortype($number){
		$errornumbers = array(
			1=>array('E_ERROR'=>'Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.'),
			2=>array('E_WARNING'=>'Run-time warnings (non-fatal errors). Execution of the script is not halted.'),
			4=>array('E_PARSE'=>'Compile-time parse errors. Parse errors should only be generated by the parser.'),
			8=>array('E_NOTICE'=>'Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.'),
			16=>array('E_CORE_ERROR'=>'Fatal errors that occur during PHPs initial startup. This is like an E_ERROR, except it is generated by the core of PHP.'),
			32=>array('E_CORE_WARNING'=>'Warnings (non-fatal errors) that occur during PHPs initial startup. This is like an E_WARNING, except it is generated by the core of PHP.'),
			64=>array('E_COMPILE_ERROR'=>'Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.'),
			128=>array('E_COMPILE_WARNING'=>'Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.'),
			256=>array('E_USER_ERROR'=>'User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().'),
			512=>array('E_USER_WARNING'=>'User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().'),
			1024=>array('E_USER_NOTICE'=>'User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().'),
			2048=>array('E_STRICT'=>'Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code.'),
			4096=>array('E_RECOVERABLE_ERROR'=>'Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR.'),
			8192=>array('E_DEPRECATED'=>'Run-time notices. Enable this to receive warnings about code that will not work in future versions.'),
			16384=>array('E_USER_DEPRECATED'=>'User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error().'),
			32767=>array('E_ALL'=>'All errors and warnings, as supported, except of level E_STRICT prior to PHP 5.4.0.')
		);

		if(isset($number)){
			return $errornumbers[$number];
		}
	}

	function handle_errors($errno, $errstr, $errfile, $errline){
		$handle_errors = array();
		if(isset($errno)){
			$geterrortype = geterrortype($errno);
			$key = key($geterrortype);

			$handle_errors['type']['string'] = $geterrortype[$key];
			$handle_errors['type']['type'] = $key;
		}

		if(isset($errstr)){
			$handle_errors['string'] = $errstr;
		}

		if(isset($errfile)){
			$handle_errors['file'] = $errfile;
		}

		if(isset($errline)){
			$handle_errors['line-number'] = $errline;
		}
		if(isset($handle_errors['type']['string']) && isset($handle_errors['type']['type'])){
			$handle_errors['error-message'] = $handle_errors['type']['string'];
			$handle_errors['error-type'] = $handle_errors['type']['type'];
			unset($handle_errors['type']);
		}

		if(DEBUG==true){
			if(!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
				$handle_errors['AJAXERRORS'] = true;
				echo json_encode($handle_errors);
				exit;
			}
			echo '<pre class="handle-errors">'; print_r($handle_errors); echo '</pre><style type="text/css">.handle-errors{box-sizing:border-box;background:#222;color:#ccc;position:fixed;bottom:0px;left:0px;width:100%;padding:10px;}</style>';
		}
	}

	function shutdown(){
		$errno = NULL;
		$errstr = NULL;
		$errfile = NULL;
		$errline = NULL;

		$last_error = (object)error_get_last();
		if(isset($last_error->type)){
			$errno = $last_error->type;
		}
		if(isset($last_error->message)){
			$errstr = $last_error->message;
		}
		if(isset($last_error->file)){
			$errfile = $last_error->file;
		}

		if(!empty($errno) || !empty($errstr) || !empty($errfile)){
			handle_errors($errno, $errstr, $errfile, $errline);
		}
	}



	set_error_handler('handle_errors');
	register_shutdown_function('shutdown');
